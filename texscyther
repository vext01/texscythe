#!/usr/bin/env python2.7
# Copyright (c) 2013, Edd Barrett <edd@openbsd.org> <vext01@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse, re
from texscythe import config

VERSION=0.1

EPILOG = """
INCLUDE and EXCLUDE are package specs of the form:

  pkgname | pkgname:filetype1, ..., filetype_n

The first variant includes all file types. Filetypes: run, src, doc, bin.

Example usage:

  Initialise the database:

      $ texscyther --initdb

  Compute a subset with scheme-tetex excluding scheme-mininial's docfiles:

      $ texscyther --subset -i scheme-tetex -x scheme-minimal:doc

  texscyther will accept gzipped tlpdb files.
"""

DESCR = "Compute subsets of the TeX Live texmf tree."

def print_version():
        print(72 * "-")
        print("  TeXScythe Version %s" % (VERSION))
        print("  (c) Edd Barrett 2013 <vext01@gmail.com> <edd@openbsd.org>")
        print(72 * "-")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            epilog=EPILOG,
            description=DESCR,
            formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument("--initdb", action='store_true',
            help="initialise the database")
    parser.add_argument("-s", "--subset", action='store_true',
            help="compute a subset")
    parser.add_argument("-i", "--include", nargs='*',
            help="include package in subset")
    parser.add_argument("-x", "--exclude", nargs='*',
            help="exclude package in subset")
    parser.add_argument("--version", action='store_true',
            help="show version")
    parser.add_argument("-p", "--prefix_filenames",
            help="prefix string to filenames")
    parser.add_argument("-o", "--output-plist",
            help="output filename")
    parser.add_argument("-t", "--tlpdb",
            help="path to texive.tlpdb")
    parser.add_argument("-d", "--sqldb",
            help="path to sqlite3 database")
    parser.add_argument("-D", "--nodirs", action='store_true',
            help="do not add directory entries in packing lists")
    parser.add_argument("-a", "--arch",
            help="cpu architecure, e.g. 'alpha-linux' "
            "(if not set, ARCH pkgs ignored)")
    parser.add_argument("-r", "--regex",
            help="filter final file list by regex before writing out")

    args = parser.parse_args()

    # No two of these should be enabled at once
    primary_tasks = [args.subset, args.version, args.initdb]
    chosen_tasks = [ x for x in primary_tasks if x ]

    if len(chosen_tasks) != 1:
        parser.error("please select a single primary task.\n  one of: --initdb, --subset, --version")

    # setup configuration
    #config = {
    #        "sqldb"             : "texscythe.db",
    #        "plist"             : "PLIST",
    #        "prefix_filenames"  : "",
    #        "tlpdb"             : "texlive.tlpdb",
    #        "arch"              : None,
    #        "dirs"              : True,
    #        "regex"             : None
    #}

    # build kwargs for Config constructor
    cfg_kws = {}
    if args.sqldb is not None:
        cfg_kws["sqldb"] = args.sqldb
    if args.prefix_filenames is not None:
        cfg_kws["prefix_filenames"] = args.prefix_filenames
    if args.output_plist is not None:
        cfg_kws["plist"] = args.output_plist
    if args.tlpdb is not None:
        cfg_kws["tlpdb"] = args.tlpdb
    if args.arch is not None:
        cfg_kws["arch"] = args.arch
    if args.nodirs:
        cfg_kws["dirs"] = False
    if args.regex is not None:
        cfg_kws["regex"] = args.regex
    if args.include is not None:
        cfg_kws["inc_pkgs"] = args.include
    if args.exclude is not None:
        cfg_kws["exc_pkgs"] = args.exclude

    cfg = config.Config(**cfg_kws)

    if not args.version:
        print_version()
        print(cfg)
        print("")

    # primary tasks
    if args.subset:
        from texscythe import subset
        subset.compute_subset(cfg)
    elif args.initdb:
        from texscythe import tlpdbparser
        tlpdbparser.initdb(cfg)
    elif args.version:
        print_version()
    else:
        assert False # should not happen
